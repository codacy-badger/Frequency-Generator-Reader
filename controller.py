#!/usr/bin/python
"""
 **File Name:** controller.py                                                                    \n
 **Project:** CURRENTLY UNNAMED                                                                  \n
 **Company:** Research in Flows, Inc                                                             \n
 **Author:** David A. Gurevich                                                                   \n

Frequency-Generator Reader | Local software for generating and processing high-frequency signals
Copyright (C) 2018  David A. Gurevich
"""

import os
import sys
from time import gmtime, strftime

from flask import Flask, render_template, request

from scanner.IPDetector import get_local_ip
from scanner.model import InputForm
from scanner.plot import create_figure
from scanner.run_scan import run_scan
from scanner.string_tool import to_hz, to_volts
from scanner.write_csv import zip_folder

if getattr(sys, 'frozen', False):
    template_folder = os.path.join(sys._MEIPASS, 'templates')
    static_folder = os.path.join(sys.executable, '..', 'static')
    app = Flask(__name__, template_folder=template_folder)
else:
    app = Flask(__name__)

process_running = False
scan_data = None


@app.route('/', methods=['GET', 'POST'])
def index():
    """
    Page to be loaded when user connects to host:5000/

    Attr:
        form: Class from model.py -- Contains input forms for scan information.
        zip_file: Zip file generated by bin_to_csv.py containing data files.
        png_img: base64 encoded PNG image of graphed data.
    """
    global process_running
    global scan_data

    if not process_running:
        form = InputForm(request.form)
        plots = []
        zip_file = None

        try:
            if request.method == 'POST' and form.validate():
                process_running = True
                param_tup = (form.fq.data, form.amp.data, form.rate.data, form.dur.data, form.thread_count.data)

                scan_data = {
                    "Frequency": to_hz(form.fq.data),
                    "Amplitude": to_volts(form.amp.data),
                    "Scan Rate": to_hz(form.rate.data),
                    "Scan Duration": str(form.dur.data) + " second(s)",
                    "Thread Count": int(form.thread_count.data),
                    "Initialization Time": strftime("%Y-%m-%d %H:%M:%S", gmtime()),
                    "Graph Data?": str(form.graph_data.data)
                }
                print("-" * 10)
                print("Scan Initialized:")
                for i in scan_data:
                    print("\t", i, ": ", scan_data[i])
                print("-" * 10)
                scan_status = run_scan(param_tup)
                del param_tup

                if scan_status:
                    zip_file = zip_folder()
                    if form.graph_data.data:
                        plots.append(create_figure())
                else:
                    error_page("There was a problem scanning. Consult Console.")
            else:
                zip_file = None
        except Exception as e:
            print(e)
            error_page(str(e))

        process_running = False
        return render_template('index.html', form=form, result=zip_file, plots=plots)
    else:
        return render_template('refused.html', scan_data=scan_data)


@app.route('/refusedtest')
def refuse_connection():
    return render_template('refused.html')


@app.route('/errortest')
def error_page(exception_message="This is a test error page."):
    return render_template('500.html', exception_message=exception_message)


@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404


if __name__ == '__main__':
    app.run(debug=True, host=get_local_ip(), port=5000)
