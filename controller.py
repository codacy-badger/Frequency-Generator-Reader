#!/usr/bin/python
"""
Research in Flows, Inc Scanner Utility (Flask Server)

The execution of this file launches a Flask server on http://127.0.0.1:5000/
that allows the user to interface with the Measurement Computing USB2020
Data Acquisition USB Board and the Hantek 1025G arbitrary function generator.

A user is able to send custom parameters for scans and then will be able to
view the resulting signal visualized in a graph generated by Bokeh.

Example:
    This program takes no extra parameters, and is launched by executing
    ``$ python controller.py ``

Copyright (c) David Gurevich 2018
"""
from flask import Flask, render_template, request

from tools.empty_output import empty_output_folder
from tools.model import InputForm
from tools.plot import create_figure
from tools.scan import run_scan
from tools.zip_output import zip_folder


def get_parameters(form):
    """
    Takes input from WTForms InputForm and packages it into 2 tuples
    that will be used as parameters in the scan() function.

    Args:
        form (tools.model.InputForm): InputForm Class to get data from.

    Returns:
        scan_parameters (tuple): Tuple consisting of the the thread count, scan rate,
                                 and duration of scan as requested by user.
        function_generator_parameters (tuple: Tuple consisting generator frequency and voltage
                                 as requested by user.
    """
    scan_parameters = (int(form.thread_count.data), int(form.rate.data), form.dur.data)
    function_generator_parameters = (int(form.fq.data), form.amp.data)

    return scan_parameters, function_generator_parameters


def successful_scan(form, plots):
    """
    Function to execute if the scan was successful.
    Creates the downloadable zip folder and plots
    the signal using Bokeh (if requested)

    Args:
        form (InputForm): Used to determine if the user wants the data graphed.
        plots (list): List of Bokeh plots.
    """
    zip_file = zip_folder()
    if form.graph_data.data:
        plots.append(create_figure())

    return zip_file


app = Flask(__name__)
"""
flask.Flask: Main app controller for Flask server
"""


@app.route('/', methods=['GET', 'POST'])
def index():
    """
    Main user interface for flask server.

    When the user 'posts' (send signal to start scanning),
    set up the scan and execute it.
    Depending on the result of the scan  (successful or unsuccessful),
    load a different page for the user.

    URL: http://127.0.0.1:5000/
    """
    form = InputForm(request.form)
    plots = []
    zip_file = None

    empty_output_folder()

    if request.method == 'POST' and form.validate():
        plots = []
        scan_parameters, function_generator_parameters = get_parameters(form)
        scan_errors = run_scan(scan_parameters, function_generator_parameters)

        if len(scan_errors) == 0:
            zip_file = successful_scan(form, plots)
            return render_template('index.html', form=form, result=zip_file, plots=plots)
        else:
            return render_template('500.html', exception_message="<br /> -".join(scan_errors), data_type=str)

    elif form.errors != {} and not form.validate():
        return render_template('500.html', exception_message=form.errors, data_type=str(type(form.errors)))

    return render_template('index.html', form=form, result=zip_file, plots=plots)


@app.route('/errortest')
def error_page(obj="This is a test error message"):
    """
    Test error page.

    URL: http://127.0.0.1/errortest
    """
    return render_template('500.html', exception_message=obj, data_type=type(obj))


@app.errorhandler(404)
def page_not_found(e):
    """
    404 (page not found) error handler page.
    """
    return render_template('404.html')


if __name__ == '__main__':
    app.run(debug=True, port=5000)
